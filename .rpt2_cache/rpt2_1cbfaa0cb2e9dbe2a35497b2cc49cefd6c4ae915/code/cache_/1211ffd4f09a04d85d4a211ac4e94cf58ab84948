{"code":"import * as React from 'react';\r\nimport { Fragment } from 'react';\r\nimport { useState, useEffect, useCallback, useMemo } from 'react';\r\nimport { useConfig } from 'docz';\r\nimport { LiveProvider, LiveError, LivePreview } from 'react-live';\r\nimport styled, { css } from 'styled-components';\r\nimport rgba from 'polished/lib/color/rgba';\r\nimport Resizable from 're-resizable';\r\nimport getter from 'lodash/get';\r\nimport { Storage } from '~utils/storage';\r\nimport { get as themeGet } from '~utils/theme';\r\nimport { ResizeBar } from './ResizeBar';\r\nimport { ActionsBar } from './ActionsBar';\r\nimport { Handle, HANDLE_SIZE } from './Handle';\r\nimport { Editor as PreBase } from '../Editor';\r\nimport { useHotkeys } from '~utils/hotkeys';\r\nconst whenFullscreen = (on, off) => (p) => p.full ? on : off;\r\nconst Overlay = styled.div `\r\n  top: 0;\r\n  left: 0;\r\n  z-index: ${whenFullscreen(9999, 0)};\r\n  position: ${whenFullscreen('fixed', 'relative')};\r\n  width: ${whenFullscreen('100vw', 'auto')};\r\n  height: ${whenFullscreen('100vh', 'auto')};\r\n  padding: ${whenFullscreen('60px 20px 20px', '0px')};\r\n  margin: ${whenFullscreen('0px', '0 0 30px')};\r\n  background: ${whenFullscreen('rgba(0,0,0,0.5)', 'transparent')};\r\n  box-sizing: border-box;\r\n  transition: background 0.3s;\r\n`;\r\nconst borderColor = themeGet('colors.border');\r\nconst minusHandleSize = `calc(100% - ${HANDLE_SIZE} + 4px)`;\r\nconst Wrapper = styled.div `\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: ${whenFullscreen(minusHandleSize, '100%')};\r\n  width: ${minusHandleSize};\r\n  border: 1px solid ${borderColor};\r\n`;\r\nconst backgroundColor = themeGet('colors.background');\r\nconst PreviewWrapper = styled.div `\r\n  position: relative;\r\n  flex: 1;\r\n  border-bottom: 1px solid ${borderColor};\r\n  background: ${backgroundColor};\r\n  min-height: ${whenFullscreen('198px', 'auto')};\r\n`;\r\nconst StyledPreviewWrapper = styled.div `\r\n  position: relative;\r\n  box-sizing: border-box;\r\n  width: 100%;\r\n  ${themeGet('styles.playground')};\r\n`;\r\nconst StyledError = styled(LiveError) `\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: calc(100% - 40px);\r\n  height: calc(100% - 40px);\r\n  padding: 20px;\r\n  margin: 0;\r\n  background: ${rgba('black', 0.8)};\r\n  font-size: 16px;\r\n  color: white;\r\n`;\r\nconst Pre = styled(PreBase) `\r\n  box-sizing: content-box;\r\n  width: calc(100% - 2px);\r\n  border-radius: 0 !important;\r\n  border-bottom: 0;\r\n  border-left: 0;\r\n  margin: 0;\r\n`;\r\nconst editorStyle = css `\r\n  border-top: 0;\r\n`;\r\nconst fromStorage = (storage) => (key, defaultValue) => {\r\n    const obj = storage.get();\r\n    return obj ? getter(obj, key) : defaultValue;\r\n};\r\nexport const Playground = ({ position, code: initialCode, codesandbox, className, style, scope, wrapper: CustomWrapper = Fragment, }) => {\r\n    const { themeConfig, native } = useConfig();\r\n    const initialShowEditor = getter(themeConfig, 'showPlaygroundEditor');\r\n    const storage = useMemo(() => new Storage(`doczPlayground-${position}`), []);\r\n    const atPos = fromStorage(storage);\r\n    const initialFullscreen = atPos('fullscreen', false);\r\n    const initialWidth = atPos('width', '100%');\r\n    const initialHeight = atPos('height', '100%');\r\n    const [key, setKey] = useState(0);\r\n    const [code, setCode] = useState(initialCode);\r\n    const [fullscreen, setFullscreen] = useState(() => initialFullscreen);\r\n    const [width, setWidth] = useState(() => initialWidth);\r\n    const [height, setHeight] = useState(() => initialHeight);\r\n    const [showEditor, setShowEditor] = useState(() => Boolean(initialShowEditor));\r\n    const state = {\r\n        fullscreen,\r\n        width,\r\n        height,\r\n        code,\r\n        key,\r\n        showEditor,\r\n    };\r\n    const resizableProps = useMemo(() => ({\r\n        minHeight: fullscreen ? 360 : '100%',\r\n        minWidth: 260,\r\n        maxWidth: '100%',\r\n        maxHeight: '100%',\r\n        size: {\r\n            width,\r\n            height,\r\n        },\r\n        style: {\r\n            margin: '0 auto ',\r\n        },\r\n        enable: {\r\n            top: false,\r\n            right: true,\r\n            bottom: fullscreen,\r\n            left: false,\r\n            topRight: false,\r\n            bottomRight: fullscreen,\r\n            bottomLeft: false,\r\n            topLeft: false,\r\n        },\r\n        handleComponent: {\r\n            // eslint-disable-next-line\r\n            right: () => React.createElement(Handle, { full: fullscreen, horizontal: true }),\r\n            // eslint-disable-next-line\r\n            bottom: () => React.createElement(Handle, { full: fullscreen, horizontal: false }),\r\n        },\r\n        onResizeStop: (e, direction, ref, d) => {\r\n            const width = ref.style.width;\r\n            const height = ref.style.height;\r\n            handleSetSize(width, height);\r\n        },\r\n    }), [fullscreen, width, height]);\r\n    const editorProps = {\r\n        css: editorStyle,\r\n        actions: React.createElement(Fragment, null),\r\n    };\r\n    const setStorageProp = useCallback((fullscreen) => {\r\n        storage.set(Object.assign({}, state, { fullscreen }));\r\n    }, []);\r\n    const handleToggleFullscreen = () => {\r\n        if (fullscreen)\r\n            storage.delete();\r\n        else\r\n            setStorageProp(true);\r\n        setFullscreen(atPos('fullscreen', false));\r\n        setWidth(atPos('width', '100%'));\r\n        setHeight(atPos('width', '100%'));\r\n    };\r\n    const handleToggleShowEditor = useCallback(() => {\r\n        setShowEditor(s => !s);\r\n    }, []);\r\n    const handleSetSize = useCallback((width, height) => {\r\n        const current = atPos('fullscreen', false);\r\n        setWidth(width);\r\n        setHeight(height);\r\n        setStorageProp(current);\r\n    }, []);\r\n    const handleRefresh = useCallback(() => {\r\n        setKey(key + 1);\r\n    }, []);\r\n    const transformCode = useCallback((code) => {\r\n        if (code.startsWith('()') || code.startsWith('class'))\r\n            return code;\r\n        return `<React.Fragment>${code}</React.Fragment>`;\r\n    }, [code]);\r\n    const codesandboxUrl = useCallback((native) => {\r\n        const url = 'https://codesandbox.io/api/v1/sandboxes/define';\r\n        return `${url}?parameters=${codesandbox}${native ? `&editorsize=75` : ``}`;\r\n    }, [codesandbox, native]);\r\n    const unloadListener = useCallback(() => {\r\n        storage.delete();\r\n    }, []);\r\n    const addUnloadListener = useCallback(() => {\r\n        if (typeof window !== 'undefined') {\r\n            window.addEventListener('beforeunload', unloadListener, false);\r\n        }\r\n    }, []);\r\n    const removeUnloadListener = useCallback(() => {\r\n        if (typeof window !== 'undefined') {\r\n            window.removeEventListener('beforeunload', unloadListener, false);\r\n        }\r\n    }, []);\r\n    useEffect(() => {\r\n        addUnloadListener();\r\n        return () => removeUnloadListener();\r\n    }, []);\r\n    useEffect(() => {\r\n        if (typeof window !== 'undefined') {\r\n            const method = fullscreen ? 'add' : 'remove';\r\n            document.body.classList[method]('with-overlay');\r\n        }\r\n    }, [fullscreen]);\r\n    useHotkeys('esc', () => {\r\n        fullscreen && handleToggleFullscreen();\r\n    });\r\n    return (React.createElement(LiveProvider, { code: code, scope: scope, transformCode: transformCode },\r\n        React.createElement(Overlay, { full: fullscreen },\r\n            fullscreen ? React.createElement(ResizeBar, { onChangeSize: handleSetSize }) : null,\r\n            React.createElement(Resizable, Object.assign({}, resizableProps),\r\n                React.createElement(Wrapper, { full: fullscreen },\r\n                    React.createElement(PreviewWrapper, { full: fullscreen },\r\n                        React.createElement(StyledPreviewWrapper, null,\r\n                            React.createElement(CustomWrapper, null,\r\n                                React.createElement(LivePreview, { className: className, style: style }))),\r\n                        React.createElement(StyledError, null)),\r\n                    React.createElement(ActionsBar, Object.assign({}, { fullscreen, showEditor, code }, { codesandboxUrl: codesandboxUrl(native), onClickRefresh: handleRefresh, onClickEditor: handleToggleShowEditor, onClickFullscreen: handleToggleFullscreen })),\r\n                    showEditor && (React.createElement(Pre, Object.assign({}, editorProps, { onChange: setCode, readOnly: false }), code)))))));\r\n};\r\n","references":["E:/docz-theme-magic-scroll/node_modules/@types/react/index.d.ts","E:/docz-theme-magic-scroll/node_modules/@types/react/index.d.ts","E:/docz-theme-magic-scroll/node_modules/@types/react/index.d.ts","E:/docz-theme-magic-scroll/node_modules/docz/dist/index.d.ts","E:/docz-theme-magic-scroll/node_modules/react-live/typings/react-live.d.ts","E:/docz-theme-magic-scroll/node_modules/@types/styled-components/index.d.ts","E:/docz-theme-magic-scroll/node_modules/polished/lib/color/rgba.d.ts","E:/docz-theme-magic-scroll/node_modules/re-resizable/index.d.ts","E:/docz-theme-magic-scroll/node_modules/@types/lodash/ts3.1/get.d.ts","E:/docz-theme-magic-scroll/src/utils/storage.ts","E:/docz-theme-magic-scroll/src/utils/theme.tsx","E:/docz-theme-magic-scroll/src/components/ui/Playground/ResizeBar.tsx","E:/docz-theme-magic-scroll/src/components/ui/Playground/ActionsBar.tsx","E:/docz-theme-magic-scroll/src/components/ui/Playground/Handle.tsx","E:/docz-theme-magic-scroll/src/components/ui/Editor/index.tsx","E:/docz-theme-magic-scroll/src/utils/hotkeys.ts"],"dts":{"name":"E:/docz-theme-magic-scroll/components/ui/Playground/index.d.ts","writeByteOrderMark":false,"text":"import { SFC } from 'react';\r\nimport { PlaygroundProps as BasePlaygroundProps } from 'docz';\r\nexport interface PlaygroundProps extends BasePlaygroundProps {\r\n    showEditor?: boolean;\r\n}\r\nexport declare const Playground: SFC<PlaygroundProps>;\r\n"}}
