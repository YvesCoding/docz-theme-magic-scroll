{"code":"import * as tslib_1 from \"tslib\";\r\nimport * as React from 'react';\r\nimport { useMemo, useCallback, useState } from 'react';\r\nimport { useConfig } from 'docz';\r\nimport loadable from '@loadable/component';\r\nimport styled from 'styled-components';\r\nimport getter from 'lodash/get';\r\nimport { ClipboardAction } from './elements';\r\nimport { get } from '~utils/theme';\r\nconst CodeMirror = loadable(() => import('../CodeMirror'));\r\nconst getLanguage = (children) => {\r\n    const defaultLanguage = 'jsx';\r\n    if (typeof children === 'string')\r\n        return defaultLanguage;\r\n    const language = getter(children, 'props.props.className') || defaultLanguage;\r\n    const result = language.replace('language-', '');\r\n    if (result === 'js' || result === 'javascript')\r\n        return 'jsx';\r\n    if (result === 'ts' || result === 'tsx' || result === 'typescript') {\r\n        return 'text/typescript';\r\n    }\r\n    return result;\r\n};\r\nconst getChildren = (children) => children && typeof children !== 'string'\r\n    ? getter(children, 'props.children')\r\n    : children;\r\nconst Wrapper = styled.div `\r\n  margin: 30px 0;\r\n  position: relative;\r\n  width: 100%;\r\n  border: 1px solid ${get('colors.border')};\r\n`;\r\nconst Actions = styled.div `\r\n  z-index: 999;\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding: 5px 10px;\r\n  background: transparent;\r\n`;\r\nexport const Editor = (_a) => {\r\n    var { mode, children, actions, onChange, className, editorClassName, language: defaultLanguage } = _a, props = tslib_1.__rest(_a, [\"mode\", \"children\", \"actions\", \"onChange\", \"className\", \"editorClassName\", \"language\"]);\r\n    const config = useConfig();\r\n    const initialCode = useMemo(() => getChildren(children), [children]);\r\n    const [code, setCode] = useState(initialCode);\r\n    const language = defaultLanguage || getLanguage(children);\r\n    const options = Object.assign({}, props, { tabSize: 2, mode: language || mode, lineNumbers: true, lineWrapping: true, autoCloseTags: true, theme: 'docz-light' });\r\n    const onEditorDidMount = (editor) => {\r\n        if (editor)\r\n            removeLastLine(editor);\r\n    };\r\n    const removeLastLine = useCallback((editor) => {\r\n        if (editor && !props.withLastLine && props.readOnly) {\r\n            const lastLine = editor.lastLine();\r\n            editor.doc.replaceRange('', { line: lastLine - 1 }, { line: lastLine });\r\n        }\r\n    }, [props.withLastLine, props.readOnly]);\r\n    const handleChange = useCallback((editor, data, code) => {\r\n        onChange && onChange(code);\r\n        setCode(code);\r\n    }, [code]);\r\n    const editorProps = (config) => ({\r\n        value: code,\r\n        className: editorClassName,\r\n        editorDidMount: onEditorDidMount,\r\n        onBeforeChange: handleChange,\r\n        options: Object.assign({}, options, { theme: config && config.themeConfig\r\n                ? config.themeConfig.codemirrorTheme\r\n                : options.theme }),\r\n    });\r\n    return (React.createElement(Wrapper, { className: className },\r\n        React.createElement(CodeMirror, Object.assign({}, editorProps(config))),\r\n        React.createElement(Actions, null, actions || React.createElement(ClipboardAction, { content: code }))));\r\n};\r\nEditor.defaultProps = {\r\n    mode: 'js',\r\n    readOnly: true,\r\n    matchBrackets: true,\r\n    indentUnit: 2,\r\n};\r\n","references":["E:/docz-theme-magic-scroll/node_modules/@types/react/index.d.ts","E:/docz-theme-magic-scroll/node_modules/@types/react/index.d.ts","E:/docz-theme-magic-scroll/node_modules/docz/dist/index.d.ts","E:/docz-theme-magic-scroll/node_modules/@loadable/component/dist/loadable.cjs.js","E:/docz-theme-magic-scroll/node_modules/@types/styled-components/index.d.ts","E:/docz-theme-magic-scroll/node_modules/@types/lodash/ts3.1/get.d.ts","E:/docz-theme-magic-scroll/src/components/ui/Editor/elements.tsx","E:/docz-theme-magic-scroll/src/utils/theme.tsx","E:/docz-theme-magic-scroll/src/components/ui/CodeMirror/index.tsx"],"dts":{"name":"E:/docz-theme-magic-scroll/components/ui/Editor/index.d.ts","writeByteOrderMark":false,"text":"import * as React from 'react';\r\nexport interface EditorProps {\r\n    children: any;\r\n    className?: string;\r\n    editorClassName?: string;\r\n    actions?: React.ReactNode;\r\n    readOnly?: boolean;\r\n    mode?: string;\r\n    matchBrackets?: boolean;\r\n    indentUnit?: number;\r\n    onChange?: (code: string) => any;\r\n    language?: string;\r\n    withLastLine?: boolean;\r\n}\r\nexport declare const Editor: React.SFC<EditorProps>;\r\n"}}
